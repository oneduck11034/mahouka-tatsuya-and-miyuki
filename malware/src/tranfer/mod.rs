use std::fs::File;
use std::io::{self, Read};
use serde_json::{Value, Error};

use lettre::{Message, SmtpTransport, Transport};
use lettre::transport::smtp::{authentication::{Credentials}}; 
// use lettre::{transport::smtp::authentication::Credentials};
use lettre::message::{Mailbox, MultiPart, SinglePart};

pub fn init_mail_by_data(data: String){
    // https://mailtrap.io/blog/rust-send-email/
    let transfer_code= init_transfer(data);
    let tls_code= tls_handling();

    println!("transfer: {}\n tls:{}", transfer_code.unwrap_err(), tls_code.unwrap_err());
}

pub fn init_mail(file_name: String){
    // Read
    let data= init_read(&file_name).unwrap_or(String::new());

    // to JSON(pass)
    // let json_data= convert_json(&data);

    // Tranfer
    // https://mailtrap.io/blog/rust-send-email/
    let transfer_code= init_transfer(data);
    let tls_code= tls_handling();

    println!("transfer: {}\n tls:{}", transfer_code.unwrap_err(), tls_code.unwrap_err());
} 

fn init_read(file_path: &str) -> io::Result<String> {
    // let file_path = "example.txt"; // Path to a text file
    let mut file = File::open(file_path)?;
    let mut content = String::new();
    file.read_to_string(&mut content)?;

    println!("File content:\n{}", content);

    Ok(content)
}

fn init_transfer(file_data: String) -> std::result::Result<(), Box<dyn std::error::Error>> {
    // Define the email
    let email = Message::builder()        
        .from("Your Name <your.email@example.com>".parse().unwrap())        
        .reply_to("your.email@example.com".parse().unwrap())        
        .to("Recipient Name <recipient.email@example.com>".parse().unwrap())        
        .subject("Rust Email")        
        .body(file_data)        
        .unwrap();
    // Set up the SMTP client    let creds = Credentials::new("Mailtrap_smtp_username".to_string(), "Mailtrap_smtp_password".to_string());
    // Open a remote connection to gmail    let mailer = SmtpTransport::relay("your_mailtrap_Host.io")?        .credentials(creds)        .build();
    // Send the email    match mailer.send(&email) {        Ok(_) => println!("Email sent successfully!"),        Err(e) => eprintln!("Could not send email: {:?}", e),    }
    Ok(())
}

fn tls_handling() -> std::result::Result<(), Box<dyn std::error::Error>> {
    // Build an email message using the builder pattern
    let email = Message::builder()
        // Set the sender's name and email address
        .from("Your Name <your address@gmail.com>".parse().unwrap()) 
        // Set the recipient's name and email address
        .to("Recipient Name <receiver address@gmail.com>".parse().unwrap()) 
        // Set the subject of the email
        .subject("Rust Email") 
        // Set the body content of the email
        .body(String::from("Hello World, this is a test email from Rust!")) 
        .unwrap();

    // Create SMTP client credentials using username and password
    let creds = Credentials::new("mailtrap_username".to_string(), "mailtrap_password".to_string()); 

    // Open a secure connection to the SMTP server using STARTTLS
    let mailer = SmtpTransport::starttls_relay("your_mailtrap_host.io")
        .unwrap()  // Unwrap the Result, panics in case of error
        .credentials(creds)  // Provide the credentials to the transport
        .build();  // Construct the transport

    // Attempt to send the email via the SMTP transport
    match mailer.send(&email) { 
        // If email was sent successfully, print confirmation message
        Ok(_) => println!("Email sent successfully!"), 
        // If there was an error sending the email, print the error
        Err(e) => eprintln!("Could not send email: {:?}", e), 
    }

    Ok(())
}


pub fn init_transfer_html(html_content: &str) ->  std::result::Result<(), Box<dyn std::error::Error>> {

    let from_email = "Your Name <sender@example.com>".parse::<Mailbox>().unwrap();
    let to_email = "Recipient Name <recipient@example.com>".parse::<Mailbox>().unwrap();

    // Define the email with HTML part
    let email = Message::builder()
        .from(from_email)
        .to(to_email)
        .subject("Rust Email")
        .multipart(
            MultiPart::alternative().singlepart(SinglePart::html(html_content.to_string())),
        )
        .unwrap();

    // Set up the SMTP client credentials
    let creds = Credentials::new("username".to_string(), "password".to_string());

    // Open a remote connection to the SMTP server with STARTTLS
    let mailer = SmtpTransport::starttls_relay("your_mailtrap_host.io")
        .unwrap()
        .credentials(creds)
        .build();

    // Send the email
    match mailer.send(&email) {
        Ok(_) => println!("Email sent successfully!"),
        Err(e) => eprintln!("Could not send email: {:?}", e),
    }

    Ok(())
}


fn convert_json(data: &str) {
    // Define a string that contains valid JSON
    let data = r#"
        {
            "name": "John Doe",
            "age": 30,
            "is_active": true,
            "skills": ["Rust", "JavaScript"]
        }
    "#;

    // Parse the string into a serde_json::Value
    let parsed: Result<Value, Error> = serde_json::from_str(data);

    // Handle parsing result
    match parsed {
        Ok(json_value) => {
            // Print the parsed JSON as a pretty string
            println!("Parsed JSON: {}", json_value);

            // Access specific fields
            if let Some(name) = json_value.get("name") {
                println!("Name: {}", name);
            }

            if let Some(age) = json_value.get("age") {
                println!("Age: {}", age);
            }
        }
        Err(e) => {
            // Handle parsing error
            eprintln!("Failed to parse JSON: {}", e);
        }
    }
}
