use std::fs::File;
use std::io::{self, Write, Read};
use walkdir::WalkDir;

pub fn save_searced_files(search_dir: &str, ) -> io::Result<()> {

    // Define the output file to save the result
    let output_file = "./found_files.txt";

    // Create or open the output file
    let mut file = File::create(output_file)?;

    // Traverse the directory recursively
    for entry in WalkDir::new(search_dir).into_iter().filter_map(Result::ok) {
        let path = entry.path();
        
        // Optional: Add filtering logic (e.g., only find `.txt` or `.rs` files)
        if path.is_file() && path.extension().and_then(|ext| ext.to_str()) == Some("rs") {
            // Write the file path to the output file
            writeln!(file, "{}", path.display())?;
        }
    }

    println!("File paths have been saved to: {}", output_file);
    Ok(())
}

pub fn read_a_file() -> io::Result<Vec<String>> {
    // Specify the path of the file to read
    let file_path = "./found_files.txt";

    // Open the file
    let mut file = File::open(file_path)?;

    // Create a string buffer to store the file content
    let mut content = String::new();

    // Read the file content into the buffer
    file.read_to_string(&mut content)?;

    let files_v: Vec<String>= content.split_whitespace().map(|f| f.parse().unwrap()).collect();

    Ok(files_v)
}
