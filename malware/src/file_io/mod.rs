use std::fs::File;
use std::io::{self, Write, Read};
use walkdir::WalkDir;

pub fn save_searced_files(search_dir: &str, ) -> io::Result<()> {

    // Define the output file to save the result
    let output_file = "./found_files.txt";

    // Create or open the output file
    let mut file = File::create(output_file)?;

    // Traverse the directory recursively
    for entry in WalkDir::new(search_dir).into_iter().filter_map(Result::ok) {
        let path = entry.path();
        
        // Optional: Add filtering logic (e.g., only find `.txt` or `.rs` files)
        if path.is_file() && path.extension().and_then(|ext| ext.to_str()) == Some("rs") {
            // Write the file path to the output file
            writeln!(file, "{}", path.display())?;
        }
    }

    println!("File paths have been saved to: {}", output_file);
    Ok(())
}

pub fn read_a_file(file_path: &str) -> io::Result<Vec<String>> {
    // Specify the path of the file to read
    // let file_path = "./found_files.txt";

    // Open the file
    let mut file = File::open(file_path)?;

    // Create a string buffer to store the file content
    let mut content = String::new();

    // Read the file content into the buffer
    file.read_to_string(&mut content)?;

    let files_v: Vec<String>= content.split_whitespace().map(|f| f.parse().unwrap()).collect();

    Ok(files_v)
}


// https://www.thorsten-hans.com/weekly-rust-trivia-get-all-files-in-a-directory/
use std::{fs, path::PathBuf};

pub fn get_files_in_folder(path: &str) -> io::Result<Vec<PathBuf>> {
    let entries = fs::read_dir(path)?;
    let all: Vec<PathBuf> = entries
        .filter_map(|entry| Some(entry.ok()?.path()))
        .collect();
    Ok(all)
}

use std::path::Path;

pub mod io_file{
    use super::*;
    
    pub fn selecteing_file(pwd: &str) -> io::Result<String> {
        let mut file_to_read = File::open(pwd)?;
        let mut content = String::new();
    
        file_to_read.read_to_string(&mut content)?;

        println!("File content copied successfully!");
    
        // content
        Ok(content)
    }

    pub fn saving_file(content: &[u8]) -> io::Result<()> {
        let mut file_to_write = File::create("output.txt")?;
    
        // Write the content to the new file
        file_to_write.write_all(content)?;
    
        println!("File content saved successfully!");
    
        Ok(())
    }

    pub fn visit_dirs(dir: &Path) -> std::io::Result<()> {
        if dir.is_dir() {
            for entry in fs::read_dir(dir)? {
                let entry = entry?;
                let path = entry.path();
    
                if path.is_dir() {
                    // If it's a directory, recurse into it
                    visit_dirs(&path)?;
                } else {
                    // If it's a file, perform the desired operation
                    println!("{}", path.display());
                    // Do something with the file path here
                }
            }
        }
        Ok(())
    }
}