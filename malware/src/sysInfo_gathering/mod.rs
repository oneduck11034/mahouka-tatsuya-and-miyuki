use std::fs::File;
use std::io::prelude::*;

use build_html::*;
use sysinfo::{
    Components, Disks, Networks, System,
};

pub fn init() -> std::io::Result<()> {
    let mut file = File::create("./report.html")?;

    let mut sys= System::new_all();

    let networks = Networks::new_with_refreshed_list();
    let mut g_interface_name= String::new();
    for (interface_name, data) in &networks {
        g_interface_name= interface_name.clone();
    }

    let html: String = HtmlPage::new()
        .with_title("System Info")
        .with_header(1, "memory")
        .with_container(
            Container::new(ContainerType::Article)
                .with_paragraph(sys.total_memory().to_string())
        )
        .with_header(1, "name")
        .with_container(
            Container::new(ContainerType::Article)
                .with_paragraph(System::name().unwrap())
        )
        .with_header(1, "kernel version")
        .with_container(
            Container::new(ContainerType::Article)
                .with_paragraph(System::kernel_version().unwrap())
        )
        .with_header(1, "os version")
        .with_container(
            Container::new(ContainerType::Article)
                .with_paragraph(System::os_version().unwrap())
        )
        .with_header(1, "host name")
        .with_container(
            Container::new(ContainerType::Article)
                .with_paragraph(System::host_name().unwrap())
        )
        .with_header(1, "interface_name")
        .with_container(
            Container::new(ContainerType::Article)
                .with_paragraph(g_interface_name)
        )
        .to_html_string();


    file.write_all(html.as_bytes())?;

    Ok(())
}